
#Spotify Streaming Data Analysis Script


import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from sklearn.model_selection import train_test_split
from sklearn.linear_model import LinearRegression
from sklearn.ensemble import RandomForestRegressor
from sklearn.preprocessing import MinMaxScaler
from sklearn.metrics import mean_squared_error, mean_absolute_error, r2_score

# 1. Load the 'Spotify_2024_Global_Streaming_Data.csv' file
df = pd.read_csv(r"C:\Users\sweth\OneDrive\Documents\GitHub\MSITM.6341\Group.Projects\Spotify_2024_Global_Streaming_Data.csv")

# 2. Clean column names: lowercase, strip whitespace, replace spaces with underscores, remove parentheses
df.columns = df.columns.str.strip().str.lower().str.replace(' ', '_')
df.columns = df.columns.str.replace('(', '', regex=False).str.replace(')', '', regex=False)
print("Initial shape:", df.shape)
print(df.head(), "\n")

# 3. Remove duplicates and drop rows with missing values in specific columns
df.drop_duplicates(inplace=True)
print("Missing values after removing duplicates:\n", df.isnull().sum(), "\n")
df.dropna(subset=['streams_last_30_days_millions', 'avg_stream_duration_min'], inplace=True)

# 4. Clean numeric columns with commas and convert to float (if any)
if df['streams_last_30_days_millions'].dtype == 'object':
    df['streams_last_30_days_millions'] = df['streams_last_30_days_millions'].str.replace(',', '').astype(float)

# 5. If 'release_date' does not exist, set 'release_year' to 2024
if 'release_date' in df.columns:
    df['release_year'] = pd.to_datetime(df['release_date'], errors='coerce').dt.year
else:
    df['release_year'] = 2024

# 6. Apply MinMaxScaler to 'avg_stream_duration_min' to create 'track_length_scaled'
scaler = MinMaxScaler()
df['track_length_scaled'] = scaler.fit_transform(df[['avg_stream_duration_min']])

# 7. Perform Exploratory Data Analysis (EDA)
print("Descriptive Statistics:\n", df.describe())
print("\nCorrelation Matrix:\n", df.corr(numeric_only=True))

# (a) Histogram of streams_last_30_days_millions
plt.figure(figsize=(8, 5))
sns.histplot(df['streams_last_30_days_millions'], bins=30, kde=True)
plt.title("Distribution of Streams (Last 30 Days)")
plt.xlabel("Streams (Millions)")
plt.ylabel("Frequency")
plt.tight_layout()
plt.show()

# (b) Boxplot of avg_stream_duration_min by genre
if 'genre' in df.columns:
    plt.figure(figsize=(10, 6))
    sns.boxplot(data=df, x='genre', y='avg_stream_duration_min')
    plt.xticks(rotation=45)
    plt.title("Average Stream Duration by Genre")
    plt.xlabel("Genre")
    plt.ylabel("Avg Stream Duration (min)")
    plt.tight_layout()
    plt.show()

# (c) Correlation heatmap for numerical features
plt.figure(figsize=(8, 6))
sns.heatmap(df.corr(numeric_only=True), annot=True, cmap='coolwarm')
plt.title("Correlation Heatmap")
plt.tight_layout()
plt.show()

# (d) Top 10 streamed albums (by streams in last 30 days)
if 'album' in df.columns:
    top_songs = df.sort_values(by='streams_last_30_days_millions', ascending=False).head(10)
    plt.figure(figsize=(12, 6))
    sns.barplot(x='streams_last_30_days_millions', y='album', data=top_songs, palette='mako')
    plt.title("Top 10 Streamed Albums (Last 30 Days)")
    plt.xlabel("Streams (Millions)")
    plt.ylabel("Album")
    plt.tight_layout()
    plt.show()

# (e) Top 10 most frequent artists (by number of appearances)
if 'artist' in df.columns:
    top_artists = df['artist'].value_counts().head(10)
    plt.figure(figsize=(10, 5))
    sns.barplot(x=top_artists.values, y=top_artists.index, palette='rocket')
    plt.title("Top 10 Most Featured Artists")
    plt.xlabel("Number of Appearances")
    plt.ylabel("Artist")
    plt.tight_layout()
    plt.show()

# 8. Select features and target for modeling
features = ['track_length_scaled', 'release_year']
X = df[features]
y = df['streams_last_30_days_millions']

# 9. Split into training and testing sets (80/20 split)
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

# 10. Train models: Linear Regression and Random Forest Regressor
lr = LinearRegression()
lr.fit(X_train, y_train)
pred_lr = lr.predict(X_test)

rf = RandomForestRegressor(n_estimators=100, random_state=42)
rf.fit(X_train, y_train)
pred_rf = rf.predict(X_test)

# 11. Evaluate models
def evaluate_model(name, y_true, y_pred):
    rmse = np.sqrt(mean_squared_error(y_true, y_pred))
    mae = mean_absolute_error(y_true, y_pred)
    r2 = r2_score(y_true, y_pred)
    print(f"\n{name} Evaluation:")
    print(f"RMSE: {rmse:.2f}")
    print(f"MAE: {mae:.2f}")
    print(f"RÂ² Score: {r2:.4f}")

evaluate_model("Linear Regression", y_test, pred_lr)
evaluate_model("Random Forest", y_test, pred_rf)

# 12. Output Linear Regression coefficients
coef_df = pd.DataFrame({'Feature': features, 'Coefficient': lr.coef_})
print("\nLinear Regression Coefficients:")
print(coef_df)
